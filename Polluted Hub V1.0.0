
--Made By Smoking&Poking

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local HttpService = game:GetService("HttpService")
local settingsFile = "Saved Settings.json"

local trackedElements = {}

function registerElement(name, element, getFunc, setFunc)
   trackedElements[name] = {
      get = getFunc,
      set = setFunc
   }
end


local Window = Rayfield:CreateWindow({
   Name = "Polluted Hub BETA Build V1.3.0",
   Icon = 134220532775799,
   LoadingTitle = "Polluted",
   LoadingSubtitle = "Made By Smoking&Poking",
   Theme = "Bloom",

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,

   ConfigurationSaving = {
      Enabled = true,
      FolderName = "workspace",
      FileName = "Polluted"
   },

   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },

   KeySystem = true,
   KeySettings = {
      Title = "Polluted V1.3.0",
      Subtitle = "Key Validation",
      Note = "Join Discord For Key",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"Testing"}
   }
})

-- üåü Play Peaceful Sound for 3 seconds when GUI Loads
local peacefulSoundId = "rbxassetid://1848354536"  -- Relaxed Scene (Example peaceful sound)
local peacefulSound = Instance.new("Sound")
peacefulSound.SoundId = peacefulSoundId
peacefulSound.Volume = 0.3  -- Adjust volume as needed
peacefulSound.Looped = false  -- Set to false so it doesn't loop
peacefulSound.Parent = game.Players.LocalPlayer.PlayerGui
peacefulSound:Play()

-- Stop the sound after 3 seconds using delay
delay(4.1, function()
    peacefulSound:Stop()
end)

local function LoadScript(url)
    local success, scriptContent = pcall(function()
        return game:HttpGet(url)
    end)
    if success then
        local ok, err = pcall(function()
            loadstring(scriptContent)()
        end)
        if not ok then
            Rayfield:Notify({
                Title = "Error",
                Content = "Script failed: " .. tostring(err),
                Duration = 5
            })
        end
    else
        Rayfield:Notify({
            Title = "Error",
            Content = "Failed to load script URL",
            Duration = 5
        })
    end
end

-- üåü Tab 14 - User Info
local Tab14 = Window:CreateTab("User Info", 4483362458)

-- ‚ÑπÔ∏è Info section
Tab14:CreateSection("Info")

Tab14:CreateButton({
    Name = "üíæ Save All Settings",
    Callback = function()
        local toSave = {}

        -- Print current values of elements to debug
        for name, el in pairs(trackedElements) do
            local value = el.get()
            print("Saving " .. name .. " with value: " .. tostring(value))
            toSave[name] = value  -- Save the current value of each element
        end

        -- Write the settings to a file
        writefile(settingsFile, HttpService:JSONEncode(toSave))
        print("Settings saved!")
    end
})

Tab14:CreateButton({
   Name = "üìÇ Load All Settings",
   Callback = function()
      if isfile(settingsFile) then
         local loaded = HttpService:JSONDecode(readfile(settingsFile))
         for name, value in pairs(loaded) do
            if trackedElements[name] then
               trackedElements[name].set(value)
            end
         end
      end
   end
})


-- üë§ Username button (does nothing)
Tab14:CreateButton({
    Name = "Username: " .. game.Players.LocalPlayer.Name,
    Callback = function()
        -- no action
    end
})

-- üß† Executor Detection
local executorName = identifyexecutor and identifyexecutor()
    or (KRNL_LOADED and "KRNL")
    or (is_sirhurt_closure and "SirHurt")
    or (syn and "Synapse X")
    or (secure_load and "Sentinel")
    or (getexecutorname and getexecutorname())
    or (getidentity and "ScriptWare")
    or "Unknown"

-- üëÄ Mobile Executor Guess (extra layer)
if (executorName == "Unknown") and (getfflag or ismobileclient or ismobile or identifyexecutor == nil) then
    if (identifyexecutor == nil and getexecutorname == nil) then
        executorName = "Likely Mobile (Delta/Fluxus/Arceus X)"
    end
end

-- üß™ Executor button (still does nothing)
Tab14:CreateButton({
    Name = "Executor: " .. executorName,
    Callback = function()
        -- no action
    end
})

-- üï∞Ô∏è Date and Time button (showing time of execution)
local executionTime = os.date("%Y-%m-%d %H:%M:%S")  -- Get the current time of script execution

-- Create the button with execution time
local timeButton = Tab14:CreateButton({
    Name = "Execution Time: " .. executionTime,
    Callback = function()
        -- no action
    end
})

-- üü¢ New Button (shows Roblox version status)
local function checkRobloxVersion()
    -- Manually set the Roblox version status based on the provided version string
    local currentRobloxVersion = "version-1e91b4133e334c9c"  -- Your current Roblox version string
    local latestRobloxVersion = "version-1e91b4133e334c9c"  -- This would be the latest known version (same in this case)

    -- Check if the current version matches the latest version
    if currentRobloxVersion == latestRobloxVersion then
        return "‚úîÔ∏è Roblox is up to date"
    else
        return "‚ùå Roblox version is outdated"
    end
end

-- Create the new button with version status
Tab14:CreateButton({
    Name = "Roblox Version Status: " .. checkRobloxVersion(),
    Callback = function()
        -- no action
    end
})

-- üî≤ New Button (shows script version status)
local function checkScriptVersion()
    -- Manually set the script's current version
    local currentScriptVersion = "1.3.0"  -- Your current script version (you can update this manually when needed)
    local latestScriptVersion = "1.3.0"  -- This would be the latest known script version (change if there's an update)

    -- Compare the versions
    if currentScriptVersion == latestScriptVersion then
        return "‚úîÔ∏è Script is up to date"
    else
        return "‚ùå Script version is outdated Latest is 1.3.0 Wait for release or head to discord"
    end
end

-- Create the new button with script version status
Tab14:CreateButton({
    Name = "Script Version Status: " .. checkScriptVersion(),
    Callback = function()
        -- no action
    end
})

-- üåü Teleports - Main Menu
local Tab16 = Window:CreateTab("Teleports", 4483362458)

local Section16 = Tab16:CreateSection("Method Selection")

local Dropdown = Tab16:CreateDropdown({          
    Name = "Methods",
    Options = {"Tween", "Teleport"},
    CurrentOption = {"Tween"},
    MultipleOptions = false,
    Flag = "Dropdown1", 
    Callback = function(Options)
        -- You can add functionality here if needed
        print("Selected method:", Options[1])
    end,
})

wait(1)  -- Give the UI time to initialize

-- Register the Dropdown
registerElement("Methods", Dropdown, 
    function() return Dropdown.CurrentOption[1] end,  -- Getter
    function(v) Dropdown:Set({v}) end                 -- Setter
)

local Section16 = Tab16:CreateSection("Teleport To Player/Tween For Some Games")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Safe dropdown holder
local TeleportDropdown

-- Get player names (excluding self optionally)
local function GetPlayerNames()
    local names = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(names, player.Name)
        end
    end
    return names
end

-- Function to rebuild the dropdown
local function UpdateTeleportDropdown()
    local playerNames = GetPlayerNames()

    -- Fallback if no players available
    if #playerNames == 0 then
        playerNames = {"No players available"}
    end

    -- Destroy old dropdown if it exists
    if TeleportDropdown then
        TeleportDropdown:Destroy()
    end

    -- ‚úÖ Do NOT redeclare `TeleportDropdown` as local here
    TeleportDropdown = Tab16:CreateDropdown({
        Name = "Teleport To Player",
        Options = playerNames,
        CurrentOption = {playerNames[1]},
        MultipleOptions = false,
        Flag = "TeleportDropdown", 
        Callback = function(Options)
            local target = Players:FindFirstChild(Options[1])
            if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
                local targetPos = target.Character.HumanoidRootPart.Position
                LocalPlayer.Character:MoveTo(targetPos)
            end
        end,
    })
end -- ‚úÖ This `end` was missing, which caused your earlier "expected end" error.

-- Initial build
UpdateTeleportDropdown()

-- Wait a moment to ensure UI elements are initialized properly
wait(1)

-- Debug check: Print out if TeleportDropdown exists and has a valid CurrentOption
if TeleportDropdown then
    print("Teleport Dropdown created with Initial Option: " .. TeleportDropdown.CurrentOption[1])
else
    print("Error: Teleport Dropdown creation failed.")
end

-- Register the Dropdown only if it was created properly
if TeleportDropdown and TeleportDropdown.CurrentOption then
    registerElement("Teleport To Player", TeleportDropdown, 
        function() 
            print("Getting Teleport Dropdown selected option: " .. TeleportDropdown.CurrentOption[1])  -- Debug output
            return TeleportDropdown.CurrentOption[1] 
        end,
        function(v) 
            TeleportDropdown:Set({v})
            print("Setting Teleport Dropdown selected option to: " .. v)  -- Debug output
        end
    )
else
    print("Teleport To Player Dropdown is not properly initialized. It cannot be registered.")
end

-- Live update on player join/leave
Players.PlayerAdded:Connect(UpdateTeleportDropdown)
Players.PlayerRemoving:Connect(UpdateTeleportDropdown)



-- üåü Tab 0 - Main Menu
local MainMenuTab = Window:CreateTab("Main Menu", 4483362458)
local MainMenuSection1 = MainMenuTab:CreateSection("Debug")

MainMenuTab:CreateButton({Name = "üõ†Ô∏è Run Debug Scan",
    Callback = function()
        local errorsFound = {}
        local HttpService = game:GetService("HttpService")

        -- Check 1: Validate Webhooks
        if not mainWebhook or mainWebhook == "" then
            table.insert(errorsFound, "‚ùå Chat webhook missing.")
        end
        if not backupWebhook or backupWebhook == "" then
            table.insert(errorsFound, "‚ùå Log webhook missing.")
        end

        -- Check 2: HTTP request support
        local requestFunc = syn and syn.request or http_request or request or (http and http.request)
        if not requestFunc then
            table.insert(errorsFound, "‚ùå HTTP requests not supported.")
        end

        -- Check 3: setfpscap support
        if not setfpscap then
            table.insert(errorsFound, "‚ö†Ô∏è setfpscap not supported.")
        end

        -- Check 4: Watermark availability
        if not watermark then
            table.insert(errorsFound, "‚ùå Watermark not initialized.")
        end

        -- Check 5: Essential functions
        if not stopMusic then
            table.insert(errorsFound, "‚ùå stopMusic function missing.")
        end
        if not playMusic then
            table.insert(errorsFound, "‚ùå playMusic function missing.")
        end

        -- Format error message
        local message = ""
        if #errorsFound == 0 then
            message = "‚úÖ All systems are functional. No issues detected."
        else
            message = table.concat(errorsFound, "\n")
        end

        -- Show Notification
        Rayfield:Notify({
            Title = "üîç Debug Scan Complete",
            Content = message,
            Duration = math.clamp(5 + (#errorsFound * 2), 5, 20)
        })
    end
})



local MainMenuSection2 = MainMenuTab:CreateSection("Discord")

MainMenuTab:CreateButton({
    Name = "üì® Join Discord Server",
    Callback = function()
        setclipboard("https://discord.gg/5pvfUNfQ") -- Replace with your real invite
        Rayfield:Notify({
            Title = "üìã Link Copied",
            Content = "Discord invite copied to clipboard!",
            Duration = 4
        })
    end
})

-- üåü Tab 6 - Character (Movement Speed, Noclip, Fly, Jump Power, Rainbow Clothing)
local Tab6 = Window:CreateTab("Character", 4483362458)
local Section6 = Tab6:CreateSection("Character Controls")


-- üåü Movement Speed Slider
local movementSpeed = 16  -- Default speed value

-- Create the slider and store it in a variable
local speedSlider = Tab6:CreateSlider({
    Name = "üö∂ Movement Speed",
    Range = {1, 100},  -- Set the range for the speed
    Increment = 1,     -- Increment value for the slider
    Suffix = " stud/s",  -- Suffix to display next to the value
    CurrentValue = movementSpeed,
    Callback = function(Value)
        movementSpeed = Value
        -- Update player's walking speed based on the slider value
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = movementSpeed
    end
})

-- Wait a moment to ensure UI elements are initialized properly
wait(1)

-- Debug check: Print out if speedSlider exists and has a valid CurrentValue
if speedSlider then
    print("SpeedSlider created with Initial Value: " .. speedSlider.CurrentValue)
else
    print("Error: SpeedSlider creation failed.")
end

-- Register the slider only if it was created properly
if speedSlider and speedSlider.CurrentValue then
    registerElement("Movement Speed", speedSlider, 
        function() 
            print("Getting SpeedSlider value: " .. speedSlider.CurrentValue)  -- Debug output
            return speedSlider.CurrentValue 
        end,  -- Getter
        function(v) 
            speedSlider:Set(v)
            print("Setting SpeedSlider value to: " .. v)  -- Debug output
        end   -- Setter
    )
else
    print("SpeedSlider is not properly initialized. It cannot be registered.")
end

-- üåü Noclip Toggle
local noclipEnabled = false  -- Default state for noclip toggle

Tab6:CreateToggle({
    Name = "Noclip",
    CurrentValue = noclipEnabled,
    Callback = function(Value)
        noclipEnabled = Value
        local character = game.Players.LocalPlayer.Character
        local humanoid = character and character:FindFirstChild("Humanoid")

        -- Enable or disable noclip based on the toggle state
        if humanoid then
            if noclipEnabled then
                -- Enable noclip (walking through walls)
                game:GetService("RunService").Heartbeat:Connect(function()
                    if noclipEnabled and character then
                        for _, part in pairs(character:GetChildren()) do
                            if part:IsA("BasePart") then
                                part.CanCollide = false
                            end
                        end
                    end
                end)
            else
                -- Disable noclip (re-enable collisions)
                for _, part in pairs(character:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
        end
    end
})

-- Default jump power value for Bubble Gum Games
local jumpPowerBubbleGum = 50  

-- Create the Jump Power slider and store it in a variable (bgsjumpSlider)
local bgsjumpSlider = Tab6:CreateSlider({
    Name = "Jump Power (Bubble Gum Games)",
    Range = {50, 100000000},  -- Set the range for jump power
    Increment = 50,           -- Increment value for the slider
    Suffix = "",              -- No suffix for this slider
    CurrentValue = jumpPowerBubbleGum,
    Callback = function(Value)
        jumpPowerBubbleGum = Value
        -- Update the character's jump power for Bubble Gum games
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = jumpPowerBubbleGum
        -- Some games may use JumpHeight instead of JumpPower, so we set both
        game.Players.LocalPlayer.Character.Humanoid.JumpHeight = jumpPowerBubbleGum * 2  -- Adjust JumpHeight for Bubble Gum games
    end
})

-- Wait a moment to ensure UI elements are initialized properly
wait(1)

-- Debug check: Print out if bgsjumpSlider exists and has a valid CurrentValue
if bgsjumpSlider then
    print("Jump Power Slider created with Initial Value: " .. bgsjumpSlider.CurrentValue)
else
    print("Error: Jump Power Slider creation failed.")
end

-- Register the slider only if it was created properly
if bgsjumpSlider and bgsjumpSlider.CurrentValue then
    registerElement("Jump Power (Bubble Gum Games)", bgsjumpSlider, 
        function() 
            print("Getting Jump Power value: " .. bgsjumpSlider.CurrentValue)  -- Debug output
            return bgsjumpSlider.CurrentValue 
        end,  -- Getter
        function(v) 
            bgsjumpSlider:Set(v)
            print("Setting Jump Power value to: " .. v)  -- Debug output
        end   -- Setter
    )
else
    print("Jump Power Slider is not properly initialized. It cannot be registered.")
end


-- Default jump power value for all games
local jumpPowerAllGames = 50  

-- Create the Jump Power (All Games) slider and store it in a variable (jumpSlider)
local jumpSlider = Tab6:CreateSlider({
    Name = "Jump Power (All Games)",
    Range = {1, 1000},  -- Set the range for jump power to 1 to 1000
    Increment = 1,      -- Increment value for the slider
    Suffix = "",        -- No suffix for this slider
    CurrentValue = jumpPowerAllGames,
    Callback = function(Value)
        jumpPowerAllGames = Value
        -- Update the character's jump power for all games
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = jumpPowerAllGames
    end
})

-- Wait a moment to ensure UI elements are initialized properly
wait(1)

-- Debug check: Print out if jumpSlider exists and has a valid CurrentValue
if jumpSlider then
    print("Jump Power (All Games) Slider created with Initial Value: " .. jumpSlider.CurrentValue)
else
    print("Error: Jump Power (All Games) Slider creation failed.")
end

-- Register the slider only if it was created properly
if jumpSlider and jumpSlider.CurrentValue then
    registerElement("Jump Power (All Games)", jumpSlider, 
        function() 
            print("Getting Jump Power (All Games) value: " .. jumpSlider.CurrentValue)  -- Debug output
            return jumpSlider.CurrentValue 
        end,  -- Getter
        function(v) 
            jumpSlider:Set(v)
            print("Setting Jump Power (All Games) value to: " .. v)  -- Debug output
        end   -- Setter
    )
else
    print("Jump Power (All Games) Slider is not properly initialized. It cannot be registered.")
end


-- üåü Rainbow Clothing Toggle
local rainbowClothingEnabled = false  -- Default state for Rainbow Clothing
local rainbowInterval = 1  -- Time in seconds between each color change (adjust this for slower/faster)

Tab6:CreateToggle({
    Name = "Rainbow Clothing",
    CurrentValue = rainbowClothingEnabled,
    Callback = function(Value)
        rainbowClothingEnabled = Value
        local character = game.Players.LocalPlayer.Character
        local player = game.Players.LocalPlayer

        -- Toggle the "Rainbow Clothing" behavior
        if rainbowClothingEnabled then
            -- Start a loop to continuously change colors with a delay
            spawn(function()
                while rainbowClothingEnabled and character do
                    -- Apply random colors to the body parts
                    for _, part in pairs(character:GetChildren()) do
                        if part:IsA("BasePart") then
                            part.Color = Color3.fromHSV(math.random(), 1, 1)
                        end
                    end

                    -- Change clothing colors randomly as well
                    local shirt = character:FindFirstChildOfClass("Shirt")
                    local pants = character:FindFirstChildOfClass("Pants")
                    if shirt then
                        shirt.Color3 = Color3.fromHSV(math.random(), 1, 1)
                    end
                    if pants then
                        pants.Color3 = Color3.fromHSV(math.random(), 1, 1)
                    end

                    -- Wait to slow down the color change
                    wait(rainbowInterval)
                end
            end)

            -- Hide the head to further hide the avatar
            local head = character:FindFirstChild("Head")
            if head then
                head.Transparency = 1  -- Make the head completely invisible
            end
        else
            -- Reset avatar appearance back to normal
            player.DisplayName = player.Name  -- Revert back to original display name

            for _, part in pairs(character:GetChildren()) do
                if part:IsA("BasePart") then
                    part.Color = Color3.fromRGB(255, 255, 255)  -- Reset to default color
                end
            end

            -- Show the head again
            local head = character:FindFirstChild("Head")
            if head then
                head.Transparency = 0  -- Make the head visible again
            end

            -- Reset clothing to default colors
            local shirt = character:FindFirstChildOfClass("Shirt")
            local pants = character:FindFirstChildOfClass("Pants")
            if shirt then
                shirt.Color3 = Color3.fromRGB(255, 255, 255)  -- Default color for shirt
            end
            if pants then
                pants.Color3 = Color3.fromRGB(255, 255, 255)  -- Default color for pants
            end
        end
    end
})



local Players = game:GetService("Players")
local player = Players.LocalPlayer

local Button = Tab6:CreateButton({
    Name = "Remove Zoom Limit",
    Callback = function()
        player.CameraMaxZoomDistance = math.huge  -- No limit on zoom out
        player.CameraMinZoomDistance = 0.5        -- Optional: allow zooming in very close
        print("Zoom limit removed!")
    end,
})

-- üåü Tab 7 - Custom Scripts (New Tab with 4 Buttons)
local Tab7 = Window:CreateTab("Misc Scripts", 4483362458)
local Section7 = Tab7:CreateSection("Misc")

Tab7:CreateButton({ Name = "Anti Afk", Callback = function() LoadScript("https://raw.githubusercontent.com/hassanxzayn-lua/Anti-afk/main/antiafkbyhassanxzyn") end })
Tab7:CreateButton({ Name = "Fly Gui V3", Callback = function() LoadScript("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt") end })
Tab7:CreateButton({ Name = "Dex Explorer", Callback = function() LoadScript("https://raw.githubusercontent.com/infyiff/backup/main/dex.lua") end })
Tab7:CreateButton({ Name = "Infinite Yield", Callback = function() LoadScript("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source") end })

-- üåü Tab 10 - Arsenal
local Tab10 = Window:CreateTab("Arsenal", 4483362458)
local Section10 = Tab10:CreateSection("Arsenal")

Tab10:CreateButton({ Name = "Plutonic", Callback = function() LoadScript("raw.githubusercontent.com/OpposedDev/Plutonic/refs/heads/main/source/loader.lua") end })
Tab10:CreateButton({ Name = "Quotas", Callback = function() LoadScript("https://raw.githubusercontent.com/Insertl/QuotasHub/main/BETAv1.3") end })

local Section10_2 = Tab10:CreateSection("New Arsenal Section")


-- üåü Tab 2 - Beaks Scripts
local Tab2 = Window:CreateTab("Beaks ", 4483362458)
local Section2 = Tab2:CreateSection("More Scripts")

Tab2:CreateButton({ Name = "Mobile Auto Bird", Callback = function() LoadScript("https://rawscripts.net/raw/Beaks-Auto-Shoot-Birds-36324") end })
Tab2:CreateButton({ Name = "Native (HAS KEY)", Callback = function() LoadScript("https://getnative.cc/script/loader") end })
Tab2:CreateButton({ Name = "COMING SOON", Callback = function() LoadScript("nothing to load") end })
Tab2:CreateButton({ Name = "COMING SOON", Callback = function() LoadScript("nothing to load") end })

local Section2_2 = Tab2:CreateSection("KeyLess")

-- üåü Tab 9 - BlueLock Rivals
local Tab9 = Window:CreateTab("BlueLock", 4483362458)
local Section9 = Tab9:CreateSection("BlueLock")

Tab9:CreateButton({ Name = "Souls Hub", Callback = function() LoadScript("https://pastebin.com/raw/JLsJfimq") end })
Tab9:CreateButton({ Name = "COMING SOON", Callback = function() LoadScript("nothing to load") end })

local Section9_2 = Tab9:CreateSection("KeyLess")

-- üåü Tab 6 - BloxFruiits
local Tab6 = Window:CreateTab("BloxFruits", 4483362458)
local Section6 = Tab6:CreateSection("BloxFruits")

Tab6:CreateButton({ Name = "RedZ", Callback = function() LoadScript("https://raw.githubusercontent.com/newredz/BloxFruits/refs/heads/main/Source.luau") end })

local Section6_2 = Tab6:CreateSection("KeyLess")

Tab6:CreateButton({ Name = "AutoFarm Keyless", Callback = function() LoadScript("https://api.realaya.xyz/v1/files/l/73mkp0aqyfo4ypy8hvl0nz10lq49fey5.lua") end })

-- üåü Tab 8 - CarCrushers2
local Tab15 =  Window:CreateTab("Car Crushers 2", 4483362458)
local Section15 = Tab15:CreateSection("CarCrushers")

Tab15:CreateButton({ Name = "Breadido", Callback = function() LoadScript("https://raw.githubusercontent.com/Breadido/main_scripts/main/Car_Crushers_2.lua") end })
Tab15:CreateButton({ Name = "COMING SOON", Callback = function() LoadScript("nothing to load") end })

local Section8_2 = Tab15:CreateSection("KeyLess")

-- üåü Tab 11 - Combat Warrior
local Tab11 = Window:CreateTab("Combat Warriors", 4483362458)
local Section11 = Tab11:CreateSection("Combat Warriors")

Tab11:CreateButton({ Name = "COMING SOON", Callback = function() LoadScript("nothing to load") end })

local Section11_2 = Tab11:CreateSection("KeyLess")

Tab11:CreateButton({ Name = "Lumin (KeyLess)", Callback = function() LoadScript("https://lumin-hub.lol/cw.lua") end })

-- üåü Tab 8 - DigIt
local Tab8 = Window:CreateTab("DigIt", 4483362458)
local Section8 = Tab8:CreateSection("DigIt")

Tab8:CreateButton({ Name = "CupPink", Callback = function() LoadScript("raw.githubusercontent.com/CupPink/scripts/main/Loader.lua") end })
Tab8:CreateButton({ Name = "COMING SOON", Callback = function() LoadScript("nothing to load") end })

local Section8_2 = Tab8:CreateSection("KeyLess")

-- üåü Tab 1 - Dead Rails Scripts
local Tab1 = Window:CreateTab("Dead Rails Scripts", 4483362458)
local Section1 = Tab1:CreateSection("Useful Scripts")

Tab1:CreateButton({ Name = "Speed Hub x (HAS KEY)", Callback = function() LoadScript("https://raw.githubusercontent.com/AhmadV99/Speed-Hub-X/main/Speed%20Hub%20X.lua") end })
Tab1:CreateButton({ Name = "Spider X Hub", Callback = function() LoadScript("https://raw.githubusercontent.com/SpiderScriptRB/Sta1kerH1ck-/refs/heads/main/Dead%20Rails%20SpiderXHub.txt") end })
Tab1:CreateButton({ Name = "Coming soon", Callback = function() LoadScript("nothing to load") end })
Tab1:CreateButton({ Name = "Coming Soon", Callback = function() LoadScript("nothing to load") end })
 
local Section1_2 = Tab1:CreateSection("KeyLess")

-- üåü Tab 5 - Fisch
local Tab5 = Window:CreateTab("Fisch", 4483362458)
local Section5 = Tab5:CreateSection("Fisch Scripts")

Tab5:CreateButton({ Name = "Native", Callback = function() LoadScript("https://raw.githubusercontent.com/FischScripts/FischHub/main/FischGui.lua") end })
Tab5:CreateButton({ Name = "Lunor", Callback = function() LoadScript("'https://lunor.dev/loader") end })
Tab5:CreateButton({ Name = "COMING SOON", Callback = function() LoadScript("nothing to load") end })

local Section5_2 = Tab5:CreateSection("KeyLess")

-- üåü Tab 3 - PetSim/PetsGo
local Tab3 = Window:CreateTab("PetSim/PetsGo", 4483362458)
local Section3 = Tab3:CreateSection("Pet Sim Scripts")

Tab3:CreateButton({ Name = "ZapHub (PetSim HAS KEY)", Callback = function() LoadScript("https://zaphub.xyz/Exec") end })
Tab3:CreateButton({ Name = "ZapHub (PetsGO HAS KEY)", Callback = function() LoadScript("https://zaphub.xyz/Exec") end })
Tab3:CreateButton({ Name = "COMING SOON", Callback = function() LoadScript("nothing to load") end })

local Section3_2 = Tab3:CreateSection("KeyLess")

-- üåü Tab 4 - JailBreak
local Tab4 = Window:CreateTab("JailBreak", 4483362458)
local Section4 = Tab4:CreateSection("JailBreak Scripts")

Tab4:CreateButton({ Name = "Blitz", Callback = function() LoadScript("https://raw.githubusercontent.com/BlitzIsKing/UniversalFarm/main/Loader/Regular") end })
Tab4:CreateButton({ Name = "COMING SOON", Callback = function() LoadScript("nothing to load") end })
Tab4:CreateButton({ Name = "COMING SOON", Callback = function() LoadScript("nothing to load") end })

local Section4_2 = Tab4:CreateSection("KeyLess")

-- üåü Tab 12- Rivals
local Tab12 = Window:CreateTab("Rivals", 4483362458)
local Section12 = Tab12:CreateSection("Rivals Scripts")

Tab12:CreateButton({ Name = "BlackOwl", Callback = function() LoadScript("https://raw.githubusercontent.com/blackowl1231/ZYPHERION/refs/heads/main/main.lua") end })
Tab12:CreateButton({ Name = "Tbao", Callback = function() LoadScript("https://raw.githubusercontent.com/tbao143/game/refs/heads/main/TbaoHubBlueLockRivals") end })
Tab12:CreateButton({ Name = "COMING SOON", Callback = function() LoadScript("") end })

local Section12_2 = Tab12:CreateSection("KeyLess")

-- üåü Tab 13 - Slap Battles
local Tab13 = Window:CreateTab("SlapBattles", 4483362458)
local Section13 = Tab13:CreateSection("SlapBattles")

Tab13:CreateButton({ Name = "COMING SOON", Callback = function() LoadScript("nothing to load") end })

local Section13_2 = Tab13:CreateSection("KeyLess")

Tab13:CreateButton({ Name = "SlapBattles KeyLess", Callback = function() LoadScript("https://rawscripts.net/raw/Slap-Battles-Open-source-for-9484") end })

-- üåü Tab 7- Settings
local SettingsTab = Window:CreateTab("Settings", 4483362458)
local SettingsSection = SettingsTab:CreateSection("Camera/Graphics")


local freecamEnabled = false
local freecamConn = nil
local originalCharCFrame = nil
local originalFogEnd = game.Lighting.FogEnd
local originalFogStart = game.Lighting.FogStart
local removedUIs = removedUIs or {}
local originalAccessories = {}
local savedShirtTemplate = ""
local savedPantsTemplate = ""
local lastFreecamDisabledPosition = nil  -- Save position when freecam is disabled

SettingsTab:CreateButton({
    Name = "FreeCam", 
    Callback = function()
        local Players = game:GetService("Players")
        local UserInputService = game:GetService("UserInputService")
        local RunService = game:GetService("RunService")
        local Lighting = game:GetService("Lighting")

        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        local camera = workspace.CurrentCamera
        local gui = player:WaitForChild("PlayerGui")

        freecamEnabled = not freecamEnabled

        local shirt = character:FindFirstChildOfClass("Shirt")
        local pants = character:FindFirstChildOfClass("Pants")

        if freecamEnabled then
            originalCharCFrame = humanoidRootPart.CFrame

            for _, ui in pairs(gui:GetChildren()) do
                if not ui.Name:lower():match("rayfield") then
                    local uiClone = ui:Clone()
                    table.insert(removedUIs, uiClone)
                    ui:Destroy()
                end
            end

            Lighting.FogEnd = 1e6
            Lighting.FogStart = 1e6
            humanoidRootPart.Anchored = true

            originalAccessories = {}
            for _, part in ipairs(character:GetChildren()) do
                if part:IsA("Accessory") then
                    table.insert(originalAccessories, part)
                    part.Parent = nil
                end
            end

            -- Save and hide clothing
            if shirt then
                savedShirtTemplate = shirt.ShirtTemplate
                shirt.ShirtTemplate = ""
            end
            if pants then
                savedPantsTemplate = pants.PantsTemplate
                pants.PantsTemplate = ""
            end

            -- Hide parts
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.Transparency = 1
                    part.LocalTransparencyModifier = 1
                    part.CanCollide = false
                elseif part:IsA("Decal") or part:IsA("Texture") then
                    part.Transparency = 1
                end
            end

            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
            end

            camera.CameraType = Enum.CameraType.Scriptable
            local camCF = camera.CFrame
            local keysDown = {}
            local speed = 30
            local yaw, pitch = 0, 0
            local rightMouseDown = false
            local ctrlHeld = false

            local function updateDirection()
                return Vector3.new(
                    (keysDown["D"] and 1 or 0) - (keysDown["A"] and 1 or 0),
                    0,
                    (keysDown["W"] and 1 or 0) - (keysDown["S"] and 1 or 0)
                )
            end

            local moveDirection = Vector3.zero

            UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if gameProcessed then return end
                if input.UserInputType == Enum.UserInputType.MouseButton2 then
                    rightMouseDown = true
                    UserInputService.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition
                end
                keysDown[input.KeyCode.Name] = true
                moveDirection = updateDirection()
                if input.KeyCode == Enum.KeyCode.LeftControl then
                    ctrlHeld = true
                    speed = 60
                end
            end)

            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton2 then
                    rightMouseDown = false
                    UserInputService.MouseBehavior = Enum.MouseBehavior.Default
                end
                keysDown[input.KeyCode.Name] = false
                moveDirection = updateDirection()
                if input.KeyCode == Enum.KeyCode.LeftControl then
                    ctrlHeld = false
                    speed = 30
                end
            end)

            freecamConn = RunService:BindToRenderStep("FreeCamUpdate", Enum.RenderPriority.Camera.Value + 1, function(dt)
                if rightMouseDown then
                    local delta = UserInputService:GetMouseDelta()
                    yaw = yaw - delta.X * 0.002
                    pitch = math.clamp(pitch - delta.Y * 0.002, -math.pi/2 + 0.1, math.pi/2 - 0.1)
                end

                local direction = CFrame.Angles(0, yaw, 0) * CFrame.Angles(pitch, 0, 0)
                camCF = CFrame.new(camCF.Position) * direction
                local moveVec = ((camCF.RightVector * moveDirection.X) + (camCF.LookVector * moveDirection.Z)) * dt * speed
                camCF = camCF + moveVec
                camera.CFrame = camCF
                humanoidRootPart.CFrame = camCF * CFrame.new(0, -5, 0)
            end)

            Rayfield:Notify({
                Title = "FreeCam Enabled",
                Content = "Streaming fixed. Character invisible. UI hidden. Right click to look.",
                Duration = 5
            })

        else
            -- Save the position of the character before disabling freecam
            lastFreecamDisabledPosition = humanoidRootPart.Position

            RunService:UnbindFromRenderStep("FreeCamUpdate")
            camera.CameraType = Enum.CameraType.Custom
            humanoidRootPart.Anchored = false

            -- **Trigger the character death here**
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.Health = 0  -- Simulate death by setting health to 0
            end

            Lighting.FogEnd = originalFogEnd
            Lighting.FogStart = originalFogStart

            -- Restore visibility
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.Transparency = 0
                    part.LocalTransparencyModifier = 0
                    part.CanCollide = true
                elseif part:IsA("Decal") or part:IsA("Texture") then
                    part.Transparency = 0
                end
            end

            -- Restore clothing
            local shirt = character:FindFirstChildOfClass("Shirt")
            local pants = character:FindFirstChildOfClass("Pants")

            if shirt and savedShirtTemplate ~= "" then
                shirt.ShirtTemplate = savedShirtTemplate
            end
            if pants and savedPantsTemplate ~= "" then
                pants.PantsTemplate = savedPantsTemplate
            end

            -- Restore accessories
            for _, accessory in ipairs(originalAccessories) do
                accessory.Parent = character
            end
            originalAccessories = {}

            -- Restore UI
            for _, uiClone in pairs(removedUIs) do
                if uiClone and uiClone.Parent == nil then
                    local success, err = pcall(function()
                        uiClone.Parent = gui
                    end)
                    if not success then
                        warn("Failed to restore UI: " .. tostring(err))
                    end
                end
            end
            removedUIs = {}

            -- Wait until the character respawns
            player.CharacterAdded:Wait()

            -- After respawn, set the character's position to the last saved position
            local newCharacter = player.Character
            local newHumanoidRootPart = newCharacter:WaitForChild("HumanoidRootPart")
            if lastFreecamDisabledPosition then
                newHumanoidRootPart.CFrame = CFrame.new(lastFreecamDisabledPosition)
            end

            Rayfield:Notify({
                Title = "FreeCam Disabled",
                Content = "Streaming restored. Character visible. UI restored.",
                Duration = 5
            })
        end
    end
})




local realisticGraphicsEnabled = false
local realismPercent = 100 -- default to full realism
local bloomEffect
local colorCorrectionEffect
local depthOfFieldEffect

-- Save original lighting
local originalLighting = {
    Ambient = game.Lighting.Ambient,
    Brightness = game.Lighting.Brightness,
    ColorShift_Bottom = game.Lighting.ColorShift_Bottom,
    ColorShift_Top = game.Lighting.ColorShift_Top,
    FogEnd = game.Lighting.FogEnd,
    FogStart = game.Lighting.FogStart,
}

-- Apply effects
local function applyRealisticGraphics()
    game.Lighting.Ambient = Color3.fromRGB(90, 90, 90)
    game.Lighting.Brightness = 1.8
    game.Lighting.ColorShift_Bottom = Color3.fromRGB(40, 40, 40)
    game.Lighting.ColorShift_Top = Color3.fromRGB(120, 120, 120)
    game.Lighting.FogEnd = 2000
    game.Lighting.FogStart = 800

    bloomEffect = Instance.new("BloomEffect")
    bloomEffect.Intensity = 0.15
    bloomEffect.Size = 18
    bloomEffect.Threshold = 1
    bloomEffect.Parent = game.Lighting

    colorCorrectionEffect = Instance.new("ColorCorrectionEffect")
    colorCorrectionEffect.Brightness = 0.02
    colorCorrectionEffect.Contrast = 0.1
    colorCorrectionEffect.Saturation = 0.1
    colorCorrectionEffect.TintColor = Color3.fromRGB(255, 245, 220)
    colorCorrectionEffect.Parent = game.Lighting

    depthOfFieldEffect = Instance.new("DepthOfFieldEffect")
    depthOfFieldEffect.FocusDistance = 200
    depthOfFieldEffect.InFocusRadius = 120
    depthOfFieldEffect.FarIntensity = 0.05
    depthOfFieldEffect.NearIntensity = 0.05
    depthOfFieldEffect.Parent = game.Lighting
end

-- Remove effects
local function restoreDefaultGraphics()
    game.Lighting.Ambient = originalLighting.Ambient
    game.Lighting.Brightness = originalLighting.Brightness
    game.Lighting.ColorShift_Bottom = originalLighting.ColorShift_Bottom
    game.Lighting.ColorShift_Top = originalLighting.ColorShift_Top
    game.Lighting.FogEnd = originalLighting.FogEnd
    game.Lighting.FogStart = originalLighting.FogStart

    if bloomEffect then bloomEffect:Destroy() end
    if colorCorrectionEffect then colorCorrectionEffect:Destroy() end
    if depthOfFieldEffect then depthOfFieldEffect:Destroy() end
end

-- Toggle Button Only
SettingsTab:CreateButton({
    Name = "Toggle Realistic Graphics",
    Callback = function()
        realisticGraphicsEnabled = not realisticGraphicsEnabled
        if realisticGraphicsEnabled then
            applyRealisticGraphics()
            Rayfield:Notify({
                Title = "Realistic Graphics Enabled",
                Content = "Realism enabled, auto FPS will still work.",
                Duration = 6
            })
        else
            restoreDefaultGraphics()
            Rayfield:Notify({
                Title = "Realistic Graphics Disabled",
                Content = "Visual effects turned off.",
                Duration = 5
            })
        end
    end
})

local SettingsSection = SettingsTab:CreateSection("Performance")


local peakLuaMemory = 0
local monitoring = false

-- Threshold in MB (tweak this!)
local memoryWarningThreshold = 100

SettingsTab:CreateButton({
    Name = "Force Emote (Any)",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")
        local animator = humanoid:FindFirstChildOfClass("Animator")

        if not animator then
            -- Create the Animator if it doesn't exist
            animator = Instance.new("Animator")
            animator.Parent = humanoid
        end

        -- Clear current animations
        for _, track in pairs(animator:GetPlayingAnimationTracks()) do
            track:Stop()
        end

        -- Emote's animation ID (example: use marketplace animation IDs)
        local emoteID = "rbxassetid://16572756230"  -- Replace with any emote ID from the marketplace (Stylish, Wave, etc.)

        -- Function to load and play the animation
        local function loadAndPlayEmote(animId)
            local anim = Instance.new("Animation")
            anim.AnimationId = animId
            
            -- Check if animation ID is valid
            if not animId or animId == "" then
                warn("Invalid AnimationId!")
                return
            end

            -- Load animation into the animator
            local track = animator:LoadAnimation(anim)
            if not track then
                warn("Failed to load animation.")
                return
            end

            -- Customize track properties
            track.Priority = Enum.AnimationPriority.Action
            track.Looped = false  -- Or set to true if you want the animation to repeat
            track:Play()
            print("Playing emote with AnimationId:", animId)
        end

        -- Force the emote to play (using marketplace animation ID)
        loadAndPlayEmote(emoteID)
    end
})



SettingsTab:CreateButton({
    Name = "Ram Debug",
    Callback = function()
        -- Get the current Lua memory usage
        local luaKB = collectgarbage("count")
        local luaMB = luaKB / 1024

        -- Format the message to display the current memory usage
        local msg = string.format("Lua memory usage: %.2f MB", luaMB)

        -- Show the notification using Rayfield:Notify
        Rayfield:Notify({
            Title = "Ram Debug",
            Content = msg,
            Duration = 5
        })
    end
})

local peakLuaMemory = 0
local monitoring = false

-- Set your warning threshold (in MB)
local memoryWarningThreshold = 30

-- Start memory monitoring function
local function startMemoryMonitoring()
    if monitoring then return end

    monitoring = true

    -- Notify user that memory monitoring has started
    Rayfield:Notify({
        Title = "Memory Monitor",
        Content = "Monitoring Script Memory.",
        Duration = 6
    })

    task.spawn(function()
        while monitoring do
            -- Get the current Lua memory usage
            local luaKB = collectgarbage("count")
            local luaMB = luaKB / 1024

            -- Track the peak memory usage
            if luaMB > peakLuaMemory then
                peakLuaMemory = luaMB
            end

            -- Check if memory usage exceeds the warning threshold
            if luaMB >= memoryWarningThreshold then
                -- Show a warning notification
                Rayfield:Notify({
                    Title = "üö® High Memory Warning Reduce Spamming Options Use Ram Debug In Settings To View Current Lua Memory",
                    Content = string.format("Lua memory usage is high!\nCurrent: %.2f MB\nThreshold: %d MB", luaMB, memoryWarningThreshold),
                    Duration = 8
                })
            end

            -- Output memory stats to the console with a 10-second delay
            task.wait(10)  -- Wait for 10 seconds before printing
            print(string.format("[Memory Monitor] Lua: %.2f MB | Peak: %.2f MB", luaMB, peakLuaMemory))

            -- Wait for 5 seconds before the next memory check
            task.wait(5)
        end
    end)
end

-- Automatically start memory monitoring when the script runs
startMemoryMonitoring()

SettingsTab:CreateButton({
    Name = "Ram Info",
    Callback = function()
        local Stats = game:GetService("Stats")
        local memoryUsage = Stats:GetTotalMemoryUsageMb()
        local msg = string.format("Roblox is using %.2f MB of RAM", memoryUsage)

        Rayfield:Notify({
            Title = "Ram Used",
            Content = msg,
            Duration = 5
        })
    end
})

SettingsTab:CreateButton({
    Name = "Clear Ram",
    Callback = function()
        local Stats = game:GetService("Stats")
        local msgBeforeCleanup
        local msgAfterCleanup

        -- Get current memory usage before cleanup
        local memoryBefore = Stats:GetTotalMemoryUsageMb()

        -- Cleanup: Destroy unused objects (e.g., example models, parts, etc.)
        -- You can add more specific cleanup if needed
        local function cleanupUnusedObjects()
            -- Example: Destroy all parts in Workspace that are not needed (be careful with this)
            for _, obj in pairs(workspace:GetChildren()) do
                if obj:IsA("Part") then
                    obj:Destroy() -- Destroy part, customize this for more specific objects
                end
            end

            -- Example: Destroy UI elements that might be consuming memory
            if game.Players.LocalPlayer.PlayerGui:FindFirstChild("SomeUIElement") then
                game.Players.LocalPlayer.PlayerGui.SomeUIElement:Destroy()
            end
        end

        -- Run cleanup function
        cleanupUnusedObjects()

        -- Get memory after cleanup
        local memoryAfter = Stats:GetTotalMemoryUsageMb()

        -- Calculate the memory freed
        local memoryFreed = memoryBefore - memoryAfter
        msgBeforeCleanup = string.format("Before cleanup: %.2f MB", memoryBefore)
        msgAfterCleanup = string.format("After cleanup: %.2f MB", memoryAfter)
        local msg = string.format("Memory freed: %.2f MB", memoryFreed)

        -- Send notification
        Rayfield:Notify({
            Title = "Ram Debug",
            Content = msgBeforeCleanup .. "\n" .. msgAfterCleanup .. "\n" .. msg,
            Duration = 5
        })
    end
})

-- Create the Graphics Quality Level slider and store it in a variable (GraphicsSlider)
local GraphicsSlider = SettingsTab:CreateSlider({
    Name = "Graphics Quality Level",
    Range = {1, 6},  -- Corresponding to the 6 quality levels in Roblox
    Increment = 1,
    Suffix = " Level",
    CurrentValue = 3,  -- Default value is set to Medium (Level 3)
    Callback = function(Value)
        -- Set the graphics quality based on the slider value
        if Value == 1 then
            settings().Rendering.QualityLevel = Enum.QualityLevel.Level01  -- Very Low
        elseif Value == 2 then
            settings().Rendering.QualityLevel = Enum.QualityLevel.Level02  -- Low
        elseif Value == 3 then
            settings().Rendering.QualityLevel = Enum.QualityLevel.Level03  -- Medium
        elseif Value == 4 then
            settings().Rendering.QualityLevel = Enum.QualityLevel.Level04  -- High
        elseif Value == 5 then
            settings().Rendering.QualityLevel = Enum.QualityLevel.Level05  -- Very High
        elseif Value == 6 then
            settings().Rendering.QualityLevel = Enum.QualityLevel.Level06  -- Ultra
        end
        
        -- Notify the user about the graphics quality level change
        Rayfield:Notify({
            Title = "üé® Graphics Quality Set",
            Content = "Graphics quality has been set to Level " .. tostring(Value),
            Duration = 5
        })
    end
})

-- Wait a moment to ensure UI elements are initialized properly
wait(1)

-- Debug check: Print out if GraphicsSlider exists and has a valid CurrentValue
if GraphicsSlider then
    print("Graphics Quality Slider created with Initial Value: " .. GraphicsSlider.CurrentValue)
else
    print("Error: Graphics Quality Slider creation failed.")
end

-- Register the slider only if it was created properly
if GraphicsSlider and GraphicsSlider.CurrentValue then
    registerElement("Graphics Quality Level", GraphicsSlider, 
        function() 
            print("Getting Graphics Quality Level value: " .. GraphicsSlider.CurrentValue)  -- Debug output
            return GraphicsSlider.CurrentValue 
        end,  -- Getter
        function(v) 
            GraphicsSlider:Set(v)
            print("Setting Graphics Quality Level value to: " .. v)  -- Debug output
        end   -- Setter
    )
else
    print("Graphics Quality Level Slider is not properly initialized. It cannot be registered.")
end


-- Create the FPS Cap slider and store it in a variable (fpsSlider)
local fpsSlider = SettingsTab:CreateSlider({
    Name = "FPS Cap",
    Range = {10, 240},  -- FPS range from 10 to 240
    Increment = 5,      -- Increment by 5 FPS
    Suffix = " FPS",
    CurrentValue = 60,  -- Default value set to 60 FPS
    Callback = function(Value)
        -- Set the FPS Cap using the setfpscap function if available
        if setfpscap then
            setfpscap(Value)
            Rayfield:Notify({
                Title = "üéØ FPS Cap Set",
                Content = "FPS has been capped to " .. tostring(Value),
                Duration = 4
            })
        else
            Rayfield:Notify({
                Title = "‚ö†Ô∏è Unsupported",
                Content = "Your executor does not support setfpscap.",
                Duration = 5
            })
        end
    end
})

-- Wait a moment to ensure UI elements are initialized properly
wait(1)

-- Debug check: Print out if fpsSlider exists and has a valid CurrentValue
if fpsSlider then
    print("FPS Cap Slider created with Initial Value: " .. fpsSlider.CurrentValue)
else
    print("Error: FPS Cap Slider creation failed.")
end

-- Register the slider only if it was created properly
if fpsSlider and fpsSlider.CurrentValue then
    registerElement("FPS Cap", fpsSlider, 
        function() 
            print("Getting FPS Cap value: " .. fpsSlider.CurrentValue)  -- Debug output
            return fpsSlider.CurrentValue 
        end,  -- Getter
        function(v) 
            fpsSlider:Set(v)
            print("Setting FPS Cap value to: " .. v)  -- Debug output
        end   -- Setter
    )
else
    print("FPS Cap Slider is not properly initialized. It cannot be registered.")
end


SettingsTab:CreateButton({
    Name = "Destroy Gui",
    Callback = function()
        Rayfield:Destroy()  -- This will destroy the Rayfield object when the button is clicked
    end
})

-- üåü Create a new section called "Misc Settings"
local MiscSettingsSection = SettingsTab:CreateSection("Misc Settings")

-- üåü Variable to store the current sound instance, volume, and repeat status
local currentSound
local currentVolume = 0.5  -- Default volume set to 50% (0.5)
local repeatEnabled = false  -- Flag to track if repeat mode is enabled

-- üåü Create Input for Music ID using RayField's CreateInput method
SettingsTab:CreateInput({
    Name = "Music ID", 
    Default = "",  -- Default value for the input box (empty string)
    PlaceholderText = "Enter Music ID here",  -- Placeholder text
    TextDisappear = true,  -- Placeholder disappears when typing
    Callback = function(MusicID)
        -- Example blacklisted music IDs
        local BlacklistedMusicIDs = {"123456", "654321"}  -- Add your actual blacklisted IDs here

        -- Check if the music ID is blacklisted
        for _, blacklistedID in pairs(BlacklistedMusicIDs) do
            if MusicID == blacklistedID then
                Rayfield:Notify({
                    Title = "üö´ Song Blacklisted",
                    Content = "This song ID is blacklisted.",
                    Duration = 5
                })
                return
            end
        end

        -- Check if the MusicID is valid (must be numeric and non-empty)
        if not MusicID or MusicID == "" or not tonumber(MusicID) then
            Rayfield:Notify({
                Title = "üö´ Invalid Song ID",
                Content = "U FUCKING MORON THIS IS NOT A SONG ID",
                Duration = 5
            })
            return
        end

        -- If not blacklisted or invalid, attempt to play the song
        local success, message = pcall(function()
            playMusic(MusicID)  -- Call the playMusic function to play the song
        end)

        if success then
            Rayfield:Notify({
                Title = "üé∂ Song Playing",
                Content = "Now playing song with ID: " .. MusicID,
                Duration = 5
            })
        else
            Rayfield:Notify({
                Title = "‚ö†Ô∏è Error",
                Content = "Failed to play the song.",
                Duration = 5
            })
        end
    end
})

-- Create the Volume Control slider and store it in a variable (volumedSlider)
local volumedSlider = SettingsTab:CreateSlider({
    Name = "Volume",
    Range = {0, 100},  -- Volume range from 0 to 100
    Increment = 1,     -- Increment by 1
    Suffix = "%",
    CurrentValue = 50, -- Default volume set to 50%
    Callback = function(Value)
        -- Update the current volume setting
        currentVolume = Value / 100  -- Convert to a range of 0-1 for volume setting

        -- Apply the volume to the current sound if it exists
        if currentSound then
            currentSound.Volume = currentVolume  -- Set the volume of the current sound object
        end

        -- Notify user about volume change
        Rayfield:Notify({
            Title = "üîä Volume Set",
            Content = "Volume has been set to " .. tostring(Value) .. "%",
            Duration = 5
        })
    end
})

-- Wait a moment to ensure UI elements are initialized properly
wait(1)

-- Debug check: Print out if volumedSlider exists and has a valid CurrentValue
if volumedSlider then
    print("Volume Slider created with Initial Value: " .. volumedSlider.CurrentValue)
else
    print("Error: Volume Slider creation failed.")
end

-- Register the slider only if it was created properly
if volumedSlider and volumedSlider.CurrentValue then
    registerElement("Volume", volumedSlider, 
        function() 
            print("Getting Volume value: " .. volumedSlider.CurrentValue)  -- Debug output
            return volumedSlider.CurrentValue 
        end,  -- Getter
        function(v) 
            volumedSlider:Set(v)
            print("Setting Volume value to: " .. v)  -- Debug output
        end   -- Setter
    )
else
    print("Volume Slider is not properly initialized. It cannot be registered.")
end


-- üåü Create Stop Button to Stop the Music
SettingsTab:CreateButton({
    Name = "Stop Music",
    Callback = function()
        stopMusic()  -- Call the stopMusic function when the button is clicked
    end
})

-- üåü Create Repeat Button to Toggle Repeat Mode
SettingsTab:CreateButton({
    Name = "Toggle Repeat",
    Callback = function()
        repeatEnabled = not repeatEnabled  -- Toggle the repeat flag
        local status = repeatEnabled and "enabled" or "disabled"
        
        Rayfield:Notify({
            Title = "üîÅ Repeat Mode " .. status,
            Content = "Repeat mode has been " .. status .. ".",
            Duration = 5
        })
    end
})

-- üåü Function to play music (Locally for the Player)
function playMusic(MusicID)
    -- Check if the MusicID is valid
    print("Attempting to play music with ID: " .. MusicID)

    -- Assuming we're using a Roblox Sound object to play music
    local sound = Instance.new("Sound")  -- Create a new Sound object
    sound.SoundId = "rbxassetid://" .. MusicID  -- Set the sound ID to the provided MusicID
    sound.Volume = currentVolume  -- Set the volume to the currently selected volume
    sound.Parent = game.Players.LocalPlayer.PlayerGui  -- Parent the sound to the local player‚Äôs PlayerGui

    -- Store the sound object in the global variable to stop it later
    currentSound = sound

    -- Debugging message
    print("Sound ID is: " .. sound.SoundId)
    print("Sound volume set to: " .. sound.Volume)

    -- Play the sound
    sound:Play()

    -- Wait for the sound to load completely before accessing the duration
    sound.Loaded:Wait()  -- Wait until the sound is loaded

    -- Show a notification with the song's duration
    local duration = math.floor(sound.TimeLength)  -- Duration in seconds
    local minutes = math.floor(duration / 60)
    local seconds = duration % 60
    local timeString = string.format("%02d:%02d", minutes, seconds)
    Rayfield:Notify({
        Title = "‚è±Ô∏è Song Duration",
        Content = "Song will play for: " .. timeString,
        Duration = 5
    })

    -- Handle repeat mode
    sound.Ended:Connect(function()
        if repeatEnabled then
            print("Repeat is enabled, playing the song again.")
            playMusic(MusicID)  -- Replay the song
        end
    end)
end

-- üåü Function to stop the currently playing music
function stopMusic()
    -- Check if there is a sound currently playing
    if currentSound and currentSound.IsPlaying then
        currentSound:Stop()  -- Stop the sound
        Rayfield:Notify({
            Title = "‚èπÔ∏è Music Stopped",
            Content = "The music has been stopped.",
            Duration = 5
        })
        print("Music has been stopped.")
    else
        Rayfield:Notify({
            Title = "‚ö†Ô∏è No Music Playing",
            Content = "There is no music currently playing to stop.",
            Duration = 5
        })
        print("No music is currently playing.")
    end
end

-- üåü Keep the Watermark (FPS, Ping, Time, Uptime) Code Separate at the Bottom
do
    local RunService = game:GetService("RunService")
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    watermark = Drawing.new("Text")
    watermark.Visible = true
    watermark.Color = Color3.fromRGB(255, 255, 255)
    watermark.Size = 16
    watermark.Position = Vector2.new(wmX, wmY)
    watermark.Outline = true
    watermark.Font = 2
    watermark.Center = false

    -- Time Setup
    local startTime = tick()
    local frameCounter = 0
    local lastFpsUpdate = tick()
    local currentFPS = 0
    local currentPing = 0

    RunService.RenderStepped:Connect(function()
        frameCounter += 1
        local now = tick()

        if now - lastFpsUpdate >= 1 then
            currentFPS = frameCounter
            frameCounter = 0
            lastFpsUpdate = now

            local success, result = pcall(function()
                return LocalPlayer:GetNetworkPing() * 1000
            end)
            if success and result then
                currentPing = math.floor(result + 0.5)
            end
        end

        local uptime = tick() - startTime
        local hrs = math.floor(uptime / 3600)
        local mins = math.floor((uptime % 3600) / 60)
        local secs = math.floor(uptime % 60)
        local uptimeStr = string.format("%02d:%02d:%02d", hrs, mins, secs)

        local dt = os.date("*t")
        local ampm = dt.hour >= 12 and "PM" or "AM"
        local hour12 = dt.hour % 12
        if hour12 == 0 then hour12 = 12 end
        local timeStr = string.format("%02d/%02d/%04d %02d:%02d %s", dt.day, dt.month, dt.year, hour12, dt.min, ampm)

        -- Build the watermark text based on toggles
        local textParts = {"Polluted Hub"}
        
        if showFPS then
            table.insert(textParts, string.format("FPS: %d", currentFPS))
        end
        if showPing then
            table.insert(textParts, string.format("Ping: %dms", currentPing))
        end
        if showTime then
            table.insert(textParts, string.format("Time: %s", timeStr))
        end
        if showUptime then
            table.insert(textParts, string.format("Uptime: %s", uptimeStr))
        end

        -- Update watermark text
        watermark.Text = table.concat(textParts, " | ")
    end)
end

SettingsTab:CreateSection("Webhooks & Discord")

-- Webhook Textboxes
local mainWebhook = ""
local backupWebhook = ""

--- Webhook Input for Join Logger
SettingsTab:CreateInput({
        Name = "Join Logger Webhook",
        PlaceholderText = "Paste your join log webhook...",
        RemoveTextAfterFocusLost = false,
        Callback = function(Text)
            backupWebhook = Text
            Rayfield:Notify({
                Title = "‚úÖ Webhook Saved",
                Content = "Join logger webhook URL set.",
                Duration = 4
            })
        end
    })
    
    -- Function to send messages to the webhook using http_request
    local function sendToWebhook(message)
        if not backupWebhook then
            warn("No webhook URL provided.")
            return
        end
    
        local data = {
            ["content"] = message
        }
    
        local jsonData = game:GetService("HttpService"):JSONEncode(data)
    
        local headers = {
            ["Content-Type"] = "application/json"
        }
    
        -- Send HTTP request to webhook URL using http_request
        local success, errorMessage = pcall(function()
            -- Send the request
            local response = http_request({
                Url = backupWebhook,
                Method = "POST",
                Headers = headers,
                Body = jsonData
            })
        end)
    
        -- Error handling if the webhook request fails
        if not success then
            warn("Failed to send to webhook: " .. errorMessage)
        end
    end
    
    -- Event for when a player joins the game
    game.Players.PlayerAdded:Connect(function(player)
        local message = player.Name .. " has joined the game."
        sendToWebhook(message)
    end)
    
    -- Event for when a player leaves the game
    game.Players.PlayerRemoving:Connect(function(player)
        local message = player.Name .. " has left the game."
        sendToWebhook(message)
    end)
    
SettingsTab:CreateButton({
    Name = "Test Join Logger",
    Callback = function()
        if backupWebhook and backupWebhook ~= "" then
            local data = {
                ["content"] = "‚úÖ Test message from Join Logger!"
            }
            local requestFunc = syn and syn.request or http_request or request or (http and http.request)
            if requestFunc then
                local success, result = pcall(function()
                    return requestFunc({
                        Url = backupWebhook,
                        Method = "POST",
                        Headers = {["Content-Type"] = "application/json"},
                        Body = HttpService:JSONEncode(data)
                    })
                end)
                if success then
                    Rayfield:Notify({Title = "Success", Content = "Join Logger test sent.", Duration = 4})
                else
                    Rayfield:Notify({Title = "Error", Content = "Failed to send backup webhook test.", Duration = 4})
                end
            else
                Rayfield:Notify({Title = "Unsupported", Content = "HTTP requests not supported.", Duration = 5})
            end
        else
            Rayfield:Notify({Title = "Missing URL", Content = "Join Logger webhook is not set.", Duration = 4})
        end
    end
})

-- üåü FPS Detection System with Effect Handling + Quality Auto Adjust
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local fpsCheckCooldown = false
local effectsReduced = false
local lastWasLow = false

local originalQuality = settings().Rendering.QualityLevel
local qualityReduced = false
local lastSwitchTime = 0
local switchCooldown = 5

local function reduceEffects()
    if effectsReduced then return end
    effectsReduced = true

    for _, v in ipairs(Lighting:GetChildren()) do
        if v:IsA("BlurEffect") then
            v.Enabled = false
        end
    end

    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("ParticleEmitter") or obj:IsA("Trail") then
            obj.Enabled = false
        end
    end
end

task.spawn(function()
    local fpsCounter = 0
    local lastTime = os.clock()

    while true do
        RunService.RenderStepped:Wait()
        fpsCounter += 1
        local now = os.clock()

        if now - lastTime >= 1 then
            local fps = fpsCounter
            local timeSinceLastSwitch = tick() - lastSwitchTime

            if fps < 60 then
                if not lastWasLow then
                    lastWasLow = true
                    reduceEffects()
                    Rayfield:Notify({
                        Title = "‚ö†Ô∏è FPS Warning",
                        Content = "FPS has been decreased. Reducing effects to compensate.",
                        Duration = 5
                    })
                end

                if not qualityReduced and timeSinceLastSwitch >= switchCooldown then
                    settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
                    qualityReduced = true
                    lastSwitchTime = tick()
                    Rayfield:Notify({
                        Title = "‚öôÔ∏è Quality Reduced",
                        Content = "Lowered graphics quality to improve FPS.",
                        Duration = 5
                    })
                end
            else
                if lastWasLow then
                    lastWasLow = false
                    Rayfield:Notify({
                        Title = "‚úÖ FPS Restored",
                        Content = "FPS is stable. Restoring performance.",
                        Duration = 5
                    })
                end

                if qualityReduced and timeSinceLastSwitch >= switchCooldown then
                    settings().Rendering.QualityLevel = originalQuality
                    qualityReduced = false
                    lastSwitchTime = tick()
                    Rayfield:Notify({
                        Title = "üåü Quality Restored",
                        Content = "Graphics quality restored.",
                        Duration = 5
                    })
                end
            end

            fpsCounter = 0
            lastTime = now
        end
    end
end)

local Tab20 = Window:CreateTab("Executor Discord Links", 4483362458)

Tab20:CreateSection("Paid")

Tab20:CreateButton({
    Name = "üì® AWPüëë",
    Callback = function()
        setclipboard("https://discord.gg/ggawp") -- Replace with your real invite
        Rayfield:Notify({
            Title = "üìã Link Copied",
            Content = "AWPüëë invite copied to clipboard!",
            Duration = 4
        })
    end
})

Tab20:CreateButton({
    Name = "üì® Wave",
    Callback = function()
        setclipboard("") -- Replace with your real invite
        Rayfield:Notify({
            Title = "üìã Link Copied",
            Content = "Wave Invite Invalid Wait For New Discord",
            Duration = 4
        })
    end
})

Tab20:CreateButton({
    Name = "üì® SeliWare",
    Callback = function()
        setclipboard("") -- Replace with your real invite
        Rayfield:Notify({
            Title = "üìã Link Copied",
            Content = "SeliWare invite copied to clipboard!",
            Duration = 4
        })
    end
})

Tab20:CreateButton({
    Name = "üì® SIRHURT",
    Callback = function()
        setclipboard("https://discord.com/invite/CPKvWTgFdV ") -- Replace with your real invite
        Rayfield:Notify({
            Title = "üìã Link Copied",
            Content = "SIRHURT invite copied to clipboard!",
            Duration = 4
        })
    end
})

Tab20:CreateButton({
    Name = "üì® Potassium",
    Callback = function()
        setclipboard("https://discord.com/invite/potassium") -- Replace with your real invite
        Rayfield:Notify({
            Title = "üìã Link Copied",
            Content = "Potassium invite copied to clipboard!",
            Duration = 4
        })
    end
})


Tab20:CreateSection("Free")

Tab20:CreateButton({
    Name = "üì® SWIFT",
    Callback = function()
        setclipboard("https://discord.gg/getswiftgg") -- Replace with your real invite
        Rayfield:Notify({
            Title = "üìã Link Copied",
            Content = "Swift invite copied to clipboard!",
            Duration = 4
        })
    end
})

Tab20:CreateButton({
    Name = "üì® Xeno",
    Callback = function()
        setclipboard("https://discord.gg/xeno-now") -- Replace with your real invite
        Rayfield:Notify({
            Title = "üìã Link Copied",
            Content = "Xeno invite copied to clipboard!",
            Duration = 4
        })
    end
})

local Players = game:GetService("Players")
local player = Players.LocalPlayer

player.CharacterAdded:Connect(function(character)
    character:WaitForChild("Humanoid").WalkSpeed = movementSpeed
    character:WaitForChild("Humanoid").JumpPower = jumpPowerAllGames

    if noclipEnabled then
        game:GetService("RunService").Heartbeat:Connect(function()
            if noclipEnabled and character then
                for _, part in pairs(character:GetChildren()) do
                    if part:IsA("BasePart") then
                part.CanCollide = false
                    end
                end
            end
        end)
    end -- ‚úÖ this was likely the missing `end`
end) -- ‚úÖ closes the CharacterAdded:Connect
